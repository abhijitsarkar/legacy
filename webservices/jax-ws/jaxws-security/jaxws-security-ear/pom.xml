<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>name.abhijitsarkar.webservices.jaxws.security</groupId>
    <artifactId>jaxws-security</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>

  <artifactId>jaxws-security-ear</artifactId>
  <packaging>ear</packaging>
  <name>jaxws-security-ear</name>
  
  <description>
    Run with MAVEN_OPTS="-Xms512m -Xmx1024m -XX:MaxPermSize=256m" mvn ...
    to avoid OOMError
  </description>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>calculator-ut</artifactId>
      <version>${project.version}</version>
      <type>war</type>
    </dependency>

    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>calculator-sym</artifactId>
      <version>${project.version}</version>
      <type>war</type>
    </dependency>

    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>calculator-ejb</artifactId>
      <version>${project.version}</version>
      <type>ejb</type>
    </dependency>

    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>jaxws-security-client</artifactId>
      <version>${project.version}</version>
      <type>war</type>
    </dependency>
  </dependencies>

  <build>

    <plugins>
      <plugin>
        <artifactId>maven-ear-plugin</artifactId>
        <configuration>
          <defaultJavaBundleDir>lib/</defaultJavaBundleDir>
          <skinnyWars>true</skinnyWars>
          <modules>
            <webModule>
              <groupId>${project.groupId}</groupId>
              <artifactId>calculator-ut</artifactId>
              <contextRoot>/calculator-ut</contextRoot>
            </webModule>
            <webModule>
              <groupId>${project.groupId}</groupId>
              <artifactId>calculator-sym</artifactId>
              <contextRoot>/calculator-sym</contextRoot>
            </webModule>
            <ejbModule>
              <groupId>${project.groupId}</groupId>
              <artifactId>calculator-ejb</artifactId>
              <bundleDir>lib</bundleDir>
            </ejbModule>
            <webModule>
              <groupId>${project.groupId}</groupId>
              <artifactId>jaxws-security-client</artifactId>
              <contextRoot>/jaxws-security-client</contextRoot>
            </webModule>
          </modules>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.glassfish.embedded</groupId>
        <artifactId>maven-embedded-glassfish-plugin</artifactId>
        <configuration>
          <app>${project.build.directory}/${project.build.finalName}.${project.packaging}</app>
          <contextRoot>/jaxws-security</contextRoot>
          <name>jaxws-security</name>
          <ports>
            <http-listener>8080</http-listener>
            <https-listener>8181</https-listener>
          </ports>
          <!-- These properties are referred to in the domain.xml -->
          <systemProperties>
            <property>keyStore.location=${project.basedir}/../jaxws-security-client/src/main/resources/META-INF/keystore.jks</property>
            <property>keyfile.location=${project.basedir}/src/main/config/keyfile</property>
          </systemProperties>
          <!-- The server needs to be configured with a custom domain.xml to be able 
            to securely communicate with the services. For a standalone instance, the configurations 
            could be done from admin console. In this case, they are done manually and the modified 
            domain.xml fed to the embedded server at startup: 1. Keystore and truststore locations 
            need to be changed; by default, the server uses the keystore/truststore packaged 
            in the embedded jar and that obviously can't, or shouldn't, be changed. See the WSIT 
            files for details about how those are used. 2. Keyfile location, that stores user 
            credentials and group mapping, need to be changed. This theoretically can be done 
            by running an asadmin command but a bug (GLASSFISH-16277) prevents the command from 
            being successful. The password is stored encrypted so the easiest way to change a 
            keyfile is to set up a user in a standalone instance and then steal the keyfile from 
            the domain/config directory. 3. Login module needs to be activated for file realm. 
            In addition, default principal to role mapping may be enabled which maps GlassFish 
            groups to Java EE roles automatically. If not enabled, the application must supply 
            a glassfish-*.xml to configure the mapping. -->
          <configFile>${project.basedir}/src/main/config/domain.xml</configFile>
        </configuration>
        <executions>
          <execution>
            <id>start-and-deploy</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>run</goal>
              <goal>deploy</goal>
            </goals>
          </execution>
          <execution>
            <id>undeploy-and-stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>undeploy</goal>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>