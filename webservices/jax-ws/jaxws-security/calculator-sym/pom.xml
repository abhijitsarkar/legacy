<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>name.abhijitsarkar.webservices.jaxws.security</groupId>
    <artifactId>jaxws-security</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>

  <artifactId>calculator-sym</artifactId>
  <packaging>war</packaging>
  <name>calculator-sym</name>
  
  <description>Symmetric binding. The following are needed in order for the services to work:
  
  <![CDATA[
    1) Starting code-first, copy the generated WSDL and rename to whatever you like. 
      Put it directly under WEB-INF or a directory directly underneath and 
      provide the location in WEB-INF/sun-jaxws.xml file.
      Starting contract-first, create the WSDL and provide the location in WEB-INF/sun-jaxws.xml file.
      
    2) Create a public/private key pair in a new keystore/truststore file. Put it under src/main/resources/META-INF.
    
    The steps to generate the keypair are as follows:
    
    keytool -genkeypair -alias calcsym-server -keyalg RSA -dname "CN=Abhijits-MacBook-Pro.local,O=home,C=us" -keypass password -keystore ./calcsym-server-store.jceks -storepass password -storetype JCEKS

    keytool -exportcert -v -alias calcsym-server -file ./calcsym-server.cer -keystore calcsym-server-store.jceks -storepass password -storetype JCEKS

    keytool -importcert -alias calcsym-client -file ./calcsym-client.cer -keypass password -noprompt -trustcacerts -storetype JCEKS -keystore ./calcsym-server-store.jceks -storepass password
    
    This page provides useful information about the algorithm suites.
    https://access.redhat.com/site/documentation/en-US/JBoss_Fuse/6.0/html/Web_Services_Security_Guide/files/MsgProtect-SOAP-SpecifyAlgorithmSuite.html
    
    3) Export the public key certificate and copy to the client project. The client will need
      to import it as part of the deal.
      
    4) Import the client certificate in the newly created keystore.
    
    5) Add the WSIT extensions as needed referencing the keystore/truststore created. 
    In this project, a symmetric binding is used. An ephemeral key is generated by the client
    and sent to the server as part of the request, using asymmetric encryption with the 
    server public key to secure the symmetric key.      
     
    6) Deploy the service and verify that the policy is included in the generated WSDL.
    ]]>
    
  </description>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <!-- Set filtering false to prevent keystore being corrupted -->
        <filtering>false</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <!-- Override exclusion of wsdl and xsd files; this time, we need those -->
          <packagingExcludes combine.self="override"></packagingExcludes>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>