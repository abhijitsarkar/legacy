<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>name.abhijitsarkar</groupId>
    <artifactId>maven-parent</artifactId>
    <version>1.0</version>
  </parent>

  <groupId>name.abhijitsarkar.webservices</groupId>
  <artifactId>webservices-parent</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>webservices-parent</name>
  <description>This project is intended to manage the dependencies and plugins for Web Services practice code</description>

  <properties>
    <project.build.sourceLevel>1.7</project.build.sourceLevel>
    <project.build.targetLevel>1.7</project.build.targetLevel>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <javaee.version>6.0</javaee.version>
    <jetty.version>9.0.6.v20130930</jetty.version>
    <glassfish.installDirectory>${user.home}/Applications/glassfish-4.0-b89</glassfish.installDirectory>
    <glassfish.domainName>domain1</glassfish.domainName>
    <glassfish.adminUser>admin</glassfish.adminUser>
    <glassfish.adminPassword>admin</glassfish.adminPassword>
    <glassfish.adminPort>4848</glassfish.adminPort>
    <glassfish.httpPort>8080</glassfish.httpPort>
    <jetty.jvmArgs>-ea -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=4000</jetty.jvmArgs>
  </properties>

  <dependencies>
    <dependency>
      <groupId>name.abhijitsarkar.util.logging</groupId>
      <artifactId>logging-util</artifactId>
      <version>1.0</version>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>1.8</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.3.1</version>
      </dependency>
      <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-web-api</artifactId>
        <version>${javaee.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>${javaee.version}</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <configuration>
          <rules>
            <requireJavaVersion>
              <version>[1.7,)</version>
            </requireJavaVersion>
            <requireMavenVersion>
              <!-- There is a bug in Maven 3.1 which now bundles Plexus that conflicts 
                with Weld at runtime -->
              <!-- https://java.net/jira/browse/GLASSFISH-20802 -->
              <version>[3.0, 3.1)</version>
              <message>There is a bug in Maven 3.1 - c.f. GLASSFISH-20802</message>
            </requireMavenVersion>
          </rules>
        </configuration>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.1</version>
          <configuration>
            <compilerVersion>${project.build.sourceLevel}</compilerVersion>
            <source>${project.build.sourceLevel}</source>
            <target>${project.build.targetLevel}</target>
            <encoding>${project.build.sourceEncoding}</encoding>
            <showDeprecation>true</showDeprecation>
            <showWarnings>true</showWarnings>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>1.3.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>2.4</version>
          <configuration>
            <failOnMissingWebXml>false</failOnMissingWebXml>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-ear-plugin</artifactId>
          <version>2.8</version>
          <configuration>
            <version>6</version>
            <defaultLibBundleDir>lib/</defaultLibBundleDir>
            <encoding>${project.build.sourceEncoding}</encoding>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-ejb-plugin</artifactId>
          <version>2.3</version>
          <configuration>
            <ejbVersion>3.1</ejbVersion>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.eclipse.jetty</groupId>
          <artifactId>jetty-maven-plugin</artifactId>
          <version>${jetty.version}</version>
          <configuration>
            <webAppConfig>
              <contextPath>/${project.artifactId}</contextPath>
            </webAppConfig>
            <!-- Following are only used in debug mode. Jetty must be started by 
              run-forked goal in order for the JVM debug arguments to take effect -->
            <jvmArgs>${jetty.jvmArgs}</jvmArgs>
            <stopPort>4001</stopPort>
            <stopKey>stop</stopKey>
            <!-- Very important - run-forked ignores the webAppConfig and hence the 
              context path; this is supposedly the default but does not work -->
            <contextPath>/${project.artifactId}</contextPath>
          </configuration>
        </plugin>
        <!-- Unused but working -->
        <!-- <plugin> <groupId>org.codehaus.cargo</groupId> <artifactId>cargo-maven2-plugin</artifactId> 
          <version>1.4.5</version> <configuration> <container> <containerId>glassfish4x</containerId> 
          This is really the root directory; inside, there's another glassfish directory <home>${glassfish.installDirectory}</home> 
          <type>installed</type> <output>${glassfish.installDirectory}/glassfish/domains/${glassfish.domainName}/logs/server.log</output> 
          <append>true</append> Fail if not started/stopped within 30 sec <timeout>30000</timeout> 
          </container> <configuration> <type>existing</type> This is really the domain directory; 
          it must exist else Cargo will try to download GlassFish! Took me 2 days and looking 
          through cargo src code to find out. Go to hell Cargo documentation team! <home>${glassfish.installDirectory}/glassfish/domains</home> 
          <properties> <cargo.glassfish.admin.port>${glassfish.adminPort}</cargo.glassfish.admin.port> 
          <cargo.servlet.port>${glassfish.httpPort}</cargo.servlet.port> <cargo.glassfish.domain.name>${glassfish.domainName}</cargo.glassfish.domain.name> 
          <cargo.glassfish.domain.debug>true</cargo.glassfish.domain.debug> <cargo.remote.username>${glassfish.adminUser}</cargo.remote.username> 
          <cargo.remote.password>${glassfish.adminPassword}</cargo.remote.password> <cargo.java.home>${java.home}/..</cargo.java.home> 
          <cargo.logging>high</cargo.logging> Maven sets java.home property to JRE but we want 
          JDK </properties> </configuration> <deployables> <deployable> <groupId>${project.groupId}</groupId> 
          <artifactId>${project.artifactId}</artifactId> <type>${project.packaging}</type> 
          <properties> <context>/${project.artifactId}</context> </properties> </deployable> 
          </deployables> </configuration> </plugin> -->

        <plugin>
          <groupId>org.glassfish.embedded</groupId>
          <artifactId>maven-embedded-glassfish-plugin</artifactId>
          <version>4.0</version>
          <dependencies>
            <dependency>
              <groupId>org.glassfish.main.extras</groupId>
              <artifactId>glassfish-embedded-all</artifactId>
              <version>4.0</version>
            </dependency>
          </dependencies>
        </plugin>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. 
          It has no influence on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <versionRange>[1.3.1,)</versionRange>
                    <goals>
                      <goal>enforce</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

</project>